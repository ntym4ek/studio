<?php

const ORDER_STATUS_CART = 0;
const ORDER_STATUS_PROCESSING = 1;
const ORDER_STATUS_DELIVERING = 2;
const ORDER_STATUS_COMPLETED = 3;
const ORDER_STATUS_CANCELLED = 4;


/**
 * Implements hook_menu().
 */
function sec_store_menu()
{
  return [
    'cart/add/%' => [
      'page callback' => 'sec_store_cart_add_product',
      'page arguments' => [2,3],
      'access callback' => 'ext_user_user_account_access',
      'type' => MENU_CALLBACK,
    ],
    'cart/delete/%' => [
      'page callback' => 'sec_store_cart_delete_item',
      'page arguments' => [2],
      'access callback' => 'ext_user_user_account_access',
      'type' => MENU_CALLBACK,
    ],
    'cart/decrease/%' => [
      'page callback' => 'sec_store_cart_edit_item',
      'page arguments' => [1, 2],
      'access callback' => 'ext_user_user_account_access',
      'type' => MENU_CALLBACK,
    ],
    'cart/increase/%' => [
      'page callback' => 'sec_store_cart_edit_item',
      'page arguments' => [1, 2],
      'access callback' => 'ext_user_user_account_access',
      'type' => MENU_CALLBACK,
    ],
    'cart' => [
      'page callback' => 'sec_store_cart_page_callback',
      'access arguments' => ['access content'],
      'type' => MENU_CALLBACK,
    ],
    'checkout-complete/%' => [
      'page callback' => 'sec_store_checkout_complete_page_callback',
      'page arguments' => [1],
      'access callback' => 'ext_user_user_account_access',
      'type' => MENU_CALLBACK,
    ],
  ];
}

function sec_store_cart_page_callback()
{
  // проверить доступ
  if ($GLOBALS['user']->uid) {
    $form = drupal_get_form('ext_store_checkout_form');
    return drupal_render($form);
  }
  // если не авторизован, отправить на страницу входа
  else {
    drupal_set_message(t('You have to log in before access to Cart.'));
    $query = ['destination' => $_SERVER["REQUEST_URI"]];
    drupal_goto('user/login', !empty($query) ? ['query' => $query] : []);
  }
}

function ext_store_checkout_form($form, $form_state)
{
  // обработка нажатий на кнопки формы
  if (!empty($form_state["triggering_element"])) {
    [$op, $item_id] = explode('-', $form_state["triggering_element"]['#name']);
    if (in_array($op, ['increase', 'decrease', 'qty'])) {
      sec_store_cart_edit_item($item_id, $op, $form_state['input'][$op . '-' . $item_id]);
    }
    if ($op == 'delete') sec_store_cart_delete_item($item_id);
  }

  $user_info = ext_user_get_user_info();

  $items_list = [];

  // получить список Препаратов в Корзине
  if ($cart = sec_store_get_user_cart()) {
    if ($order_info = sec_store_get_order_info($cart, true)) {
      $items_list = $order_info['items'];
    }
  }

  $form = [
    '#attributes' => ['id' => 'cart-form'],
  ];

  if ($items_list) {
    // список Корзины
    foreach ($items_list as $item) {
      $element = [];
      $element['#image_url'] = $item['product']['image']['teaser'];
      $element['#status'] = (int)$item['status'];
      $element['#label'] = $item['product']['label'];
      $element['#url'] = $item['product']['url'];
      $element['#id'] = $item['id'];
      // если товар доступен для заказа
      if ($element['#status']) {
        $element['#category'] = $item['product']['category']['label'];

        // Количество, Плюс, Минус
        $element['qty-' . $item['id']] = [
          '#type' => 'textfield',
          '#size' => '1',
          '#value' => $item['qty'],
          '#ajax' => [
            'wrapper' => 'cart-form',
            'callback' => 'ext_store_checkout_form_ajax',
            'event' => 'text_change',
          ],
        ];
        if ($item['qty'] > 1) {
          $element['decrease-' . $item['id']] = [
            '#type' => 'button',
            '#name' => 'decrease-' . $item['id'],
            '#value' => '-',
            '#theme_wrappers' => ['button_icon'],
            '#attributes' => ['class' => ['btn', 'btn-icon']],
            '#ajax' => [
              'wrapper' => 'cart-form',
              'callback' => 'ext_store_checkout_form_ajax',
            ],
          ];
        } else {
          $element['decrease' . $item['id']]['#markup'] = '&nbsp;';
        }
        $element['increase-' . $item['id']] = [
          '#type' => 'button',
          '#name' => 'increase-' . $item['id'],
          '#value' => '+',
          '#theme_wrappers' => ['button_icon'],
          '#attributes' => ['class' => ['btn', 'btn-icon']],
          '#ajax' => [
            'wrapper' => 'cart-form',
            'callback' => 'ext_store_checkout_form_ajax',
          ],
        ];
        $element['delete-' . $item['id']] = [
          '#type' => 'button',
          '#name' => 'delete-' . $item['id'],
          '#value' => 'delete',
          '#theme_wrappers' => ['button_icon'],
          '#attributes' => ['class' => ['btn', 'btn-icon']],
          '#ajax' => [
            'wrapper' => 'cart-form',
            'callback' => 'ext_store_checkout_form_ajax',
          ],
        ];

      }

      if (!isset($form['products'])) $form['products'] = [];
      $form['products'][$item['id']] = $element;
    }

    // данные пользователя
    $form['username'] = [
      '#type' => 'textfield',
      '#title' => t('User name'),
      '#default_value' => $user_info['main']['name_short'],
    ];
    $form['phone'] = [
      '#type' => 'textfield',
      '#title' => t('Phone'),
      '#default_value' => $user_info['main']['phone'],
    ];
    $form['email'] = [
      '#type' => 'textfield',
      '#title' => t('Email'),
      '#default_value' => $user_info['email'],
    ];

    $form['comment'] = [
      '#type' => 'textarea',
      '#title' => t('Comment'),
      '#rows' => 2,
    ];

    $form['submit'] = [
      '#type' => 'submit',
      '#value' => t('Place order'),
      '#attributes' => ['class' => ['btn', 'btn-brand', 'btn-wide', 'btn-uppercase']],
    ];

    $form['#submit'] = ['ext_store_cart_form_submit'];
  } else {
    $form['message']['#markup'] = '<p class="cart-empty">' . t('Cart is empty, go to <a href="@catalog">Catalog</a>', ['@catalog' => url('search')]) . '</p>';
  }

  return $form;
}
function ext_store_checkout_form_ajax($form, $form_state)
{
  return $form;
}
function ext_store_cart_form_validate($form, $form_state)
{
}
function ext_store_cart_form_submit($form, $form_state)
{
  if ($cart = sec_store_get_user_cart()) {
    $order_wr = entity_metadata_wrapper('order', $cart->id);
    $order_wr->field_order_status   = ORDER_STATUS_PROCESSING;
    $order_wr->field_order_username = $form_state['values']['username'];
    $order_wr->field_order_phone    = $form_state['values']['phone'];
    $order_wr->field_order_email    = $form_state['values']['email'];
    $order_wr->field_order_comment  = $form_state['values']['comment'];
    $order_wr->save();
  }

  drupal_goto('checkout-complete/' . $cart->id);
}


/**
 * Добавить товар в Корзину
 */
function sec_store_cart_add_product($product_id)
{
  // если авторизован
  if ($uid = $GLOBALS['user']->uid) {
    // если Продукт существует
    if ($product_info = sec_catalog_get_product_info($product_id)) {
      // найти корзину
      $cart = sec_store_get_user_cart($uid);
      if (!$cart) {
        // если нет, создать Корзину
        $cart = entity_create('order', [
          'type' => 'order',
          'created' => REQUEST_TIME,
          'uid' => $uid,
          'field_order_status' => [
            'und' => [0 => ['value' => ORDER_STATUS_CART]],
          ],
        ]);
        entity_save('order', $cart);
      }

      // если ещё не в Корзине, добавить
      if (!sec_store_get_product_in_cart_item_id($cart->id, $product_id)) {
        $item = entity_create('field_collection_item', ['field_name' => 'field_order_items']);
        $item->setHostEntity('order', $cart);
        $item_wr = entity_metadata_wrapper('field_collection_item', $item);

        // задать Продукт и количество Записи Заказа
        $item_wr->field_order_item_product = $product_info['id'];
        $item_wr->field_order_item_qty = 1;
        $item_wr->save();
      }
    }

    $cart_btn = theme('cart_btn', ['in_cart' => true, 'product_id' => $product_id]);
    $commands[] = ajax_command_replace('#product-' . $product_id, $cart_btn);
    $commands[] = ajax_command_replace('#cart', theme('cart_link'));
    ajax_deliver(['#type' => 'ajax', '#commands' => $commands]);
  }
}

/**
 * Удалить товар из Корзины
 */
function sec_store_cart_delete_item($item_id)
{
  if ($cart = sec_store_get_user_cart()) {
    $cart_wr = entity_metadata_wrapper('order', $cart);
    foreach ($cart_wr->field_order_items->getIterator() as $item_wr) {
      if ($item_wr->getIdentifier() == $item_id) {
        $item_wr->delete();
      }
    }
  }
}

/**
 * Редактирование количества товара в Корзине
 */
function sec_store_cart_edit_item($item_id, $op, $value)
{
  //  Вариант с загрузкой только filed_collection_item (fci) и изменением количества товара в записи fci
  // приводит к изменению id fci, но id дочерних полей (field_order_item_qty и остальных) оставались без изменения,
  // что приводило к потере данных в изменянемом fci. (не разбирался в причинах)
  //  Вариант с загрузкой всей сущности Заказа и через неё изменения количества приводит к изменению количества только в
  // кэше сущности, изменения в БД не происходит. (не разбирался в причинах)
  //  Выбран вариант с db_update поля field_order_item_qty без перезагрузки страницы.
  // Необходимо сразу пометить кэш поля как устаревший и сбрасывать кэш сущности fci, так как изменённое значение будет использоваться в этом же сеансе,
  // а пометка кэша подействует только на следующий.
  if ($op == 'decrease') {
    db_update('field_data_field_order_item_qty')
      ->expression('field_order_item_qty_value', 'field_order_item_qty_value - :int', array(':int' => 1))
      ->condition('entity_id', $item_id)
      ->condition('field_order_item_qty_value', 1, '>')
      ->execute();
  }
  if ($op == 'increase') {
    db_update('field_data_field_order_item_qty')
      ->expression('field_order_item_qty_value', 'field_order_item_qty_value + :int', array(':int' => 1))
      ->condition('entity_id', $item_id)
      ->execute();
  }
  if ($op == 'qty' && $value > 0) {
    db_update('field_data_field_order_item_qty')
      ->condition('entity_id', $item_id)
      ->fields(['field_order_item_qty_value' => $value])
      ->execute();
  }

  // пометить кэш поля, как устаревший
  $cid = 'field:field_collection_item:' . $item_id;
  cache_clear_all($cid, 'cache_field');

  // сбросить кэш сущности
  entity_get_controller('field_collection_item')->resetCache([$item_id]);
}

/**
 * Вернуть Корзину Пользователя
 */
function sec_store_get_user_cart($uid = null)
{
  $cart = null;
  $uid = $uid ?? $GLOBALS['user']->uid;

  if ($uid) {
    $query = db_select('eck_order', 'o');
    $query->condition('o.uid', $uid);
    $query->innerJoin('field_data_field_order_status', 'os', 'os.entity_id = o.id');
    $query->condition('os.field_order_status_value', ORDER_STATUS_CART);
    $query->addField('o', 'id');

    if ($result = $query->execute()->fetchField()) {
      $entities = entity_load('order', [$result]);
      $cart = reset($entities);
    }
  }

  return $cart;
}

/**
 * Вернуть информацию о Корзине Пользователя
 *
 * $products - установить в true, если нужна информация о продуктах
 */
function sec_store_get_order_info($order, $get_products = false)
{
  $cart = [];

  $order_wr = entity_metadata_wrapper('order', $order);
  if ($order_wr->value()) {
    $items = [];
    $products_count = 0;
    foreach ($order_wr->field_order_items->getIterator() as $item_wr) {
      if ($item_wr->value()) {
        $product_id = $item_wr->field_order_item_product->getIdentifier();
        // проверить наличие препарата и активность
        $query = db_select('node', 'n');
        $query->condition('n.nid', $product_id);
        $query->addField('n', 'status');
        $product_status = $query->execute()->fetchField();
        // если товар есть в базе с любым статусом
        if ($product_status !== FALSE) {
          $items[$item_wr->getIdentifier()] = [
            'id' => $item_wr->getIdentifier(),
            'product' => $get_products ? sec_catalog_get_product_info($product_id) : [],
            'status' => $product_status,
            'qty' => $item_wr->field_order_item_qty->value(),
          ];

          $products_count++;
        }
      }
    }

    $cart = [
      'id' => $order_wr->getIdentifier(),
      'number' => 'STUDIO' . str_pad($order_wr->getIdentifier()+100, 5, '0', STR_PAD_LEFT),  // можно оформить, например, ЭВА00021
      'status' => [
        'id' => $order_wr->field_order_status->value(),
        'label' => t($order_wr->field_order_status->label()),
      ],
      'items' => $items,
      'products_count' => $products_count,
      'username' => $order_wr->field_order_username->value(),
      'email' => $order_wr->field_order_email->value(),
      'phone' => $order_wr->field_order_phone->value(),
      'comment' => $order_wr->field_order_comment->value(),
    ];
  }

  return $cart;
}

/**
 * Страница с оформленным заказом
 */
function sec_store_checkout_complete_page_callback($order_id)
{
  $output = '<p>' . t('No order %order_id found', ['%order_id' => $order_id]) . '</p>';

  if ($order_info = sec_store_get_order_info($order_id)) {
    $products = $order_info['products_count'];

    $output = '<h3>' . t('Order #%order_id has been placed', ['%order_id' => $order_info['number']]) . '</h3>';
    $output .= '<p>' . t('Your order with') . ' ' .
                        ($products ? format_plural($products, '@count product', '@count products') : '') .
                       ' ' . t('is being processed.') . '<br>';
    $output .= t('You will get email message on each order processing stage.') . '</p>';
  }

  return $output;
}

/**
 * Вернуть id Записи в Корзине для заданного Продукта и Варианта тары.
 * Если Вариант тары не задан, то проверить любой кроме Образца.
 */
function sec_store_get_product_in_cart_item_id($cart_id, $product_id, $tare_id = null)
{
  $item_id = null;

  if ($cart_id && $product_id) {
    $query = db_select('field_data_field_order_items', 'oi');
    $query->condition('oi.entity_id', $cart_id);
    $query->innerJoin('field_data_field_order_item_product', 'oip', 'oip.entity_id = oi.field_order_items_value');
    $query->condition('oip.field_order_item_product_target_id', $product_id);
    $query->addField('oi', 'field_order_items_value');
    $item_id = $query->execute()->fetchField();
  }

  return $item_id;
}

/**
 * Проверить, есть ли в Корзине Пользователя заданный Продукт
 */
function sec_store_check_product_in_users_cart($product_id, $uid = null)
{
  $result = false;

  $uid = $uid ?? $GLOBALS['user']->uid;
  if ($uid && $cart = sec_store_get_user_cart($uid)) {
    if (sec_store_get_product_in_cart_item_id($cart->id, $product_id)) $result = true;
  }

  return $result;
}

/**
 * Implements hook_entity_update().
 */
function sec_store_entity_update($entity, $type)
{
  if ($type == 'order') {
    $old_status = $entity->original->field_order_status["und"][0]["value"];
    $new_status = $entity->field_order_status["und"][0]["value"];
    // если статус изменился, отправить Письмо пользователю
    if ($new_status != $old_status) {
      $params['order_id'] = $entity->id;
      if ($mail_to = $entity->field_order_email["und"][0]["value"] ?? '') {
        $params['recipient'] = MAIL_RECIPIENT_USER;
        $lang = user_preferred_language(user_load($entity->uid));
        drupal_mail('ext_mail', 'order_status', $mail_to, $lang, $params);
      }
      if ($new_status == ORDER_STATUS_PROCESSING) {
        $params['recipient'] = MAIL_RECIPIENT_MANAGER;
        $lang = language_list()['ru'];
        drupal_mail('ext_mail', 'order_status', variable_get('eva_manager_email', ''), $lang, $params);
      }
    }
  }
}

function sec_store_theme()
{
  return [
    'ext_store_checkout_form' => [
      'render element' => 'form',
      'template' => 'templates/checkout-form',
    ],
    'cart_btn' => array(
      'variables' => ['in_cart' => null, 'product_id' => null],
    ),
    'cart_link' => array(
      'variables' => [],
    ),
  ];
}

function theme_cart_btn($vars)
{
  $classes = ['btn', 'btn-brand', 'btn-small', 'btn-uppercase'];
  if ($vars['in_cart']) {
    $path = $GLOBALS['user']->uid ? 'cart' : 'need-login';
    $text = t('Product is in cart');
    $link = l($text, $path, [
      'html' => true,
      'attributes' => ['title' => t('Go to Cart'), 'class' => $classes],
      'query' => ['destination' => $_SERVER['REQUEST_URI']],
    ]);
  } else {
    $classes = array_merge($classes, $GLOBALS['user']->uid ? ['use-ajax'] : []);
    $text = t('Buy item');
    $path = $GLOBALS['user']->uid ? 'cart/add/' . $vars['product_id'] : 'need-login';
    $link = l($text, $path, [
      'html' => true,
      'attributes' => ['class' => $classes],
      'query' => ['destination' => $_SERVER['REQUEST_URI']],
    ]);
  }

  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.form');

  return '<div id="product-'. $vars['product_id'] . '" class="cart-btn">' . $link . '</div>';
}

function theme_cart_link($vars)
{
  $output = '';

  if ($GLOBALS['user']->uid) {
    $cart = sec_store_get_user_cart();
    $order_info = sec_store_get_order_info($cart);
    $badge = !empty($order_info['items']) ? '<div class="badge">' . count($order_info['items']) . '</div>' : '';
    $cart_link = l('корзина' . $badge, 'cart', ['html' => TRUE]);
    $output = '<div id="cart" class="cart-link">' . $cart_link . '</div>';
  }

  return $output;
}
